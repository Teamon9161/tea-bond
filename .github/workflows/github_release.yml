name: PyBond Release

on:
  push:
    tags:
      - 'pybond*'
  workflow_dispatch:

permissions:
  contents: write

env:
  PYTHON_VERSION: '3.10'
  PROJECT_DIR: 'pybond'
  DIST_DIR: 'dist'

jobs:
  build:
    name: Build (${{ matrix.kind }} / ${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            kind: manylinux2014
            target: x86_64
          - os: ubuntu-latest
            kind: manylinux_2_28
            target: x86_64
          - os: ubuntu-latest
            kind: musllinux_1_2
            target: x86_64
          - os: windows-latest
            kind: windows
            target: x86_64
          - os: macos-latest
            kind: macos_universal2
            target: universal2

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: ${{ env.PROJECT_DIR }}

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}

      - uses: PyO3/maturin-action@v1
        with:
          working-directory: ${{ env.PROJECT_DIR }}
          args: >
            --release
            --out ${{ github.workspace }}/${{ env.DIST_DIR }}
            --sdist
          manylinux: ${{ startsWith(matrix.kind,'manylinux') && matrix.kind || (startsWith(matrix.kind,'musllinux') && matrix.kind) || 'off' }}
          target: ${{ matrix.target }}
          before-script-linux: |
            yum install -y pkg-config openssl-devel
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.kind == 'macos_universal2' && '10.13' || '' }}

      - name: Smoke test
        run: |
          python -m venv .venv
          if [ "$RUNNER_OS" = "Windows" ]; then
            .\.venv\Scripts\python.exe -m pip install -U pip
            .\.venv\Scripts\python.exe -m pip install ${{ env.DIST_DIR }}/*.whl
            .\.venv\Scripts\python.exe -c "import pybond; print(pybond.__version__)"
          else
            source .venv/bin/activate
            pip install -U pip
            pip install ${{ env.DIST_DIR }}/*.whl
            python -c "import pybond; print(pybond.__version__)"
          fi
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.kind }}-${{ matrix.target }}
          path: ${{ env.DIST_DIR }}/*

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/pybond')
    environment: pypi
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - uses: actions/attest-build-provenance@v1
        with:
          subject-path: "artifacts/**"

      - uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          generate_release_notes: true

      - uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing artifacts/**/*
